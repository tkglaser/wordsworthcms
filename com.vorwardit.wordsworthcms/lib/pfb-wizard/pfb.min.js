(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/Booking.html',
    '<div class="row"><div class="col-md-12"><div class="panel panel-default"><div class="panel-heading"><h1 class="panel-title">Vielen Dank, Ihre Fahrt ist jetzt gebucht!</h1></div><div class="panel-body"><p class="pull-right hidden-print" role="group"><button class="btn btn-primary btn-xs" type="button" ng-click="showMailForm()"><span class="fa fa-mail-forward"></span> Per Mail senden...</button> <button class="btn btn-info btn-xs" type="button" ng-click="print()"><span class="fa fa-print"></span> Ausdrucken</button></p><p ng-if="request.status == \'Booked\' && request.outstanding > 0">Ihnen sollte in den n&auml;chsten Minuten eine Best&auml;tigung per EMail zugehen. Der Rechnungsbetrag in Höhe von <strong>{{request.outstanding | currency}}</strong> wird erst fällig, wenn wir Ihnen den Auftrag verbindlich bestätigt haben. Dazu erhalten Sie von uns eine separate Auftragsbestätigung.</p><p ng-if="request.status == \'Booked\' && request.outstanding == 0">Ihnen sollte in den n&auml;chsten Minuten eine Best&auml;tigung per EMail zugehen. Bitte beachten Sie, dass der Vertrag erst mit Zusendung der Auftragsbestätigung zustande kommt.</p><div class="clearfix"></div><div class="panel panel-default pull-right ng-cloak" ng-show="isMailFormShown" style="max-width:300px;"><div class="panel-body"><div ng-hide="mailSendSuccess" class="input-group input-group-sm"><input type="text" class="form-control input-sm" placeholder="Email" ng-model="emailForSending"> <span class="input-group-btn"><button class="btn btn-primary btn-sm" type="button" ng-disabled="emailBeingSent" ng-click="sendMail()"><span ng-hide="emailBeingSent"><span class="fa fa-envelope"></span> Senden</span> <span ng-show="emailBeingSent"><span class="fa fa-fw fa-cog fa-spin"></span></span></button></span></div><div ng-show="mailSendSuccess" class="text-success">Email erfolgreich versandt!</div></div></div><div class="clearfix"></div><div class="panel" ng-class="(request.outstanding > 0) ? \'panel-warning\' : \'panel-success\'"><div class="panel-heading"><h2 class="panel-title">Ihre Buchung bei PAUL f&auml;hrt Bus. Nummer: <strong>{{request.number}}</strong></h2></div><div class="panel-body"><div class="row"><div class="col-sm-5"><h4>Rechnungsadresse</h4><address><span ng-if="request.organisation"><strong>{{request.organisation}}</strong><br>z.Hd.</span> <strong>{{request.name}}</strong><br>{{request.address}}<br>{{request.postcode}} {{request.town}}</address><h4>Kontakt</h4><div>Email: <strong>{{request.email}}</strong></div></div><div class="col-sm-7"><h4>Reisedaten</h4><div class="row"><div class="col-xs-2">Fahrt:</div><div class="col-xs-10">Von <strong>{{request.startName}}</strong> nach <strong>{{request.targetName}}</strong></div><div class="col-xs-offset-2 col-xs-10" ng-show="request.busShouldStay"><i class="fa fa-info-circle"></i> Bus bleibt vor Ort</div><div class="col-xs-2">Hinfahrt:</div><div class="col-xs-10">Am <strong>{{request.startDate | date}}</strong>, <span ng-show="request.startTimeMode == \'Departure\'">Abfahrt <strong>{{request.startTimeDepart}}</strong> (Ankunft ca. {{request.startTimeArrive}})</span> <span ng-show="request.startTimeMode == \'Arrival\'">Ankunft <strong>{{request.startTimeArrive}}</strong> (Abfahrt ca. {{request.startTimeDepart}})</span></div><div class="col-xs-2">R&uuml;ckfahrt:</div><div class="col-xs-10"><span ng-show="request.tripType == \'OneWay\'"><strong>Keine R&uuml;ckfahrt</strong></span> <span ng-show="request.tripType == \'Return\'">Am <strong>{{request.returnDate | date}}</strong>, <span ng-show="request.returnTimeMode == \'Departure\'">R&uuml;ckfahrt <strong>{{request.returnTimeDepart}}</strong> (R&uuml;ckkunft ca. {{request.returnTimeArrive}})</span> <span ng-show="request.returnTimeMode == \'Arrival\'">R&uuml;ckkunft <strong>{{request.returnTimeArrive}}</strong> (R&uuml;ckfahrt ca. {{request.returnTimeDepart}})</span></span></div><div class="col-xs-2">Personen:</div><div class="col-xs-10"><strong>{{request.passengers}}</strong></div></div></div></div></div><table class="table table-responsive table-striped table-bordered table-condensed"><tr><th>Leistung</th><th class="text-center">Beschreibung</th><th class="text-right">Preis</th></tr><tr><td><p style="font-weight:bold; font-size:large">{{request.productName}}</p></td><td><div class="text-center" ng-bind-html="request.safeProductDescription"></div></td><td class="text-right">{{request.price | currency}}</td></tr><tr><td class="text-right" colspan="2"><strong>Zwischensumme:</strong></td><td class="text-right">{{request.price | currency}}</td></tr><tr><td class="text-right" colspan="2">enthalten 19% MwSt.:</td><td class="text-right">{{request.price * 0.19 | currency}}</td></tr><tr><td class="text-right" colspan="2"><strong>Gesamtpreis inkl. MwSt.:</strong></td><td class="text-right"><strong>{{request.price | currency}}</strong></td></tr><tr><td class="text-right" colspan="2">Bereits gezahlt:</td><td class="text-right">{{request.paid | currency}}</td></tr><tr><td class="text-right" colspan="2">Differenz:</td><td class="text-right">{{request.outstanding | currency}}</td></tr></table></div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/CannotQuote.html',
    '<div class="row"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="panel panel-danger"><div class="panel-heading"><h1 class="panel-title">Gebiet noch nicht verf&uuml;gbar</h1></div><div class="panel-body"><p class="leadx">Leider k&ouml;nnen wir Ihnen in diesem Gebiet momentan kein Angebot machen. Hinterlassen Sie uns Ihre E-Mailadresse und wir melden uns, sobald PAUL in Ihrem Gebiet verf&uuml;gbar ist!</p><form class="form-horizontal" name="register" ng-hide="success"><div class="form-group"><label class="col-sm-2 control-label">Name</label><div class="col-sm-10"><input type="text" class="form-control" placeholder="Ihr Name" required="" ng-model="Name"></div></div><div class="form-group"><label class="col-sm-2 control-label">E-Mail</label><div class="col-sm-10"><input type="email" class="form-control" placeholder="Ihre E-Mailadresse" required="" ng-model="EMail"></div></div><div class="form-group"><div class="col-sm-10 col-sm-offset-2"><button type="submit" class="btn btn-primary btn-block btn-lg" ng-click="submit()" ng-disabled="!register.$valid || !register.$dirty"><span class="fa fa-check"></span> Bitte benachrichtigen Sie mich!</button></div></div></form><div class="alert alert-success" ng-show="success"><span class="fa fa-check-circle"></span> Vielen Dank!</div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/Landing.html',
    '<div class="row"><div class="col-lg-12"><div class="alert alert-info"><strong><i class="fa fa-info-circle"></i> Willkommen beim Angebotsassistenten.</strong> Starten Sie, indem Sie Abfahrtsort und Zielort Ihrer Reise eingeben.</div><form name="ctrl.Request"><div class="panel panel-default"><div class="panel-body"><div class="row"><div class="col-sm-4 col-md-4"><div class="form-group-lg has-feedback" ng-class="ctrl.startErrorClass()"><input class="form-control input-lg" type="text" id="StartName" name="StartName" ng-model="StartName" ng-keyup="ctrl.onStartNameEdit()" placeholder="Abfahrtsort (z.B. Berlin)" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.startErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.startErrorClass() == \'has-error\'"></span></div><div class="list-group" ng-show="ctrl.startPredictions.length > 0"><a style="cursor:pointer" class="list-group-item" ng-repeat="prediction in ctrl.startPredictions" ng-click="ctrl.setStartPlace(prediction)">{{prediction.description}}</a></div></div><div class="col-sm-4 col-md-4"><div class="form-group-lg has-feedback" ng-class="ctrl.targetErrorClass()"><input class="form-control input-lg" type="text" id="TargetName" name="TargetName" ng-model="TargetName" ng-keyup="ctrl.onTargetNameEdit()" placeholder="Zielort (z.B. Hamburg)" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.targetErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.targetErrorClass() == \'has-error\'"></span></div><div class="list-group" ng-show="ctrl.targetPredictions.length > 0"><a style="cursor:pointer" class="list-group-item" ng-repeat="prediction in ctrl.targetPredictions" ng-click="ctrl.setTargetPlace(prediction)">{{prediction.description}}</a></div></div><div class="col-sm-4 col-md-4"><button class="btn btn-primary btn-lg btn-block" type="button" ng-click="ctrl.submitMap()" ng-disabled="ctrl.mapLoading"><span ng-show="ctrl.mapLoading"><span class="fa fa-fw fa-cog fa-spin"></span></span> <span ng-hide="ctrl.mapLoading">Angebot kalkulieren</span></button> <small class="lead-out">Keine Angst. Das Angebot ist unverbindlich.</small></div></div><div ng-if="ctrl.gacValidationMessage.length > 0" class="alert alert-warning"><span class="fa fa-exclamation-circle"></span> {{ctrl.gacValidationMessage}}</div></div></div></form></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/OfferExpired.html',
    '<div class="row"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="panel panel-danger"><div class="panel-heading"><h1 class="panel-title">Angebot verfallen</h1></div><div class="panel-body"><p class="lead">Dieses Angebot ist leider nicht mehr g&uuml;ltig.</p><p class="text-info"><span class="fa fa-info-circle"></span> Klicken Sie <strong>NEU BERECHNEN</strong> um f&uuml;r Ihre Reise einen neuen Sofortpreis zu erhalten. Ihre Reisedaten m&uuml;ssen Sie nicht erneut eingeben.</p><div class="text-center"><a href="#/request/?r={{requestId}}&s=recalc" class="btn btn-primary">Neu berechnen</a></div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/Order.html',
    '<div class="row"><div class="col-md-12"><div class="panel panel-primary ng-cloak" ng-show="!redirecting"><div class="panel-heading"><h1 class="panel-title">Ihr Angebot von PAUL f&auml;hrt Bus</h1></div><div class="panel-body"><div class="row"><div class="col-sm-4"><div class="panel panel-default"><div class="panel-heading"><h4 div="" class="panel-title text-center">{{offer.productName}}</h4></div><div class="panel-body"><h2 class="text-center"><strong>{{offer.price / request.passengers | currency}}</strong>/p.P.</h2><p class="text-center"><small>Gesamt {{offer.price | currency}}</small></p><hr><div class="text-center" ng-bind-html="offer.safeProductDescription"></div></div></div></div><div class="col-sm-8"><div class="panel panel-default"><div class="panel-body"><h4>Reisedaten <small><a href="#/request?r={{requestId}}&s=o"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><div class="row"><div class="col-xs-2">Fahrt:</div><div class="col-xs-10">Von <strong>{{request.startName}}</strong> nach <strong>{{request.targetName}}</strong></div><div class="col-xs-offset-2 col-xs-10" ng-show="request.busShouldStay"><i class="fa fa-info-circle"></i> Bus bleibt vor Ort</div><div class="col-xs-2">Hinfahrt:</div><div class="col-xs-10">Am <strong>{{request.startDate | date}}</strong>, <span ng-show="request.startTimeMode == \'Departure\'">Abfahrt <strong>{{request.startTimeDepart}}</strong> (Ankunft ca. {{request.startTimeArrive}})</span> <span ng-show="request.startTimeMode == \'Arrival\'">Ankunft <strong>{{request.startTimeArrive}}</strong> (Abfahrt ca. {{request.startTimeDepart}})</span></div><div class="col-xs-2">R&uuml;ckfahrt:</div><div class="col-xs-10"><span ng-show="request.tripType == \'OneWay\'"><strong>Keine R&uuml;ckfahrt</strong></span> <span ng-show="request.tripType == \'Return\'">Am <strong>{{request.returnDate | date}}</strong>, <span ng-show="request.returnTimeMode == \'Departure\'">R&uuml;ckfahrt <strong>{{request.returnTimeDepart}}</strong> (R&uuml;ckkunft ca. {{request.returnTimeArrive}})</span> <span ng-show="request.returnTimeMode == \'Arrival\'">R&uuml;ckkunft <strong>{{request.returnTimeArrive}}</strong> (R&uuml;ckfahrt ca. {{request.returnTimeDepart}})</span></span></div><div class="col-xs-2">Personen:</div><div class="col-xs-10"><strong>{{request.passengers}}</strong></div></div></div></div><h4>Ihre Rechnungsadresse</h4><form class="form-horizontal form-condensed" name="form"><div class="form-group" ng-class="nameValidClass()"><label class="col-sm-3 col-md-2">Name *</label><div class="col-sm-9 col-md-10"><input type="text" class="form-control" name="name" placeholder="Ihr Name" ng-model="name" required=""></div></div><div class="form-group" ng-class="emailValidClass()"><label class="col-sm-3 col-md-2">Email *</label><div class="col-sm-9 col-md-10"><input type="email" class="form-control" name="email" placeholder="Ihre Email" ng-model="email" required=""></div></div><div class="form-group"><label class="col-sm-3 col-md-2">Organisation</label><div class="col-sm-9 col-md-10"><input type="text" class="form-control" name="organisation" placeholder="Ihre Firma oder Arbeitgeber" ng-model="organisation"></div></div><div class="form-group" ng-class="streetValidClass()"><label class="col-sm-3 col-md-2">Strasse *</label><div class="col-sm-9 col-md-10"><input type="text" class="form-control" name="street" ng-model="street" placeholder="Ihre Strasse" required=""></div></div><div class="form-group" ng-class="townValidClass()"><label class="col-sm-3 col-md-2">Stadt *</label><div class="col-sm-9 col-md-10"><input type="text" class="form-control" name="town" ng-model="town" placeholder="Ihre Stadt" required=""></div></div><div class="form-group" ng-class="postcodeValidClass()"><label class="col-sm-3 col-md-2">Postleitzahl&nbsp;*</label><div class="col-sm-9 col-md-10"><input type="text" class="form-control" name="postcode" ng-model="postcode" placeholder="Ihre Postleitzahl" required=""></div></div><div class="form-group"><label class="col-sm-3 col-md-2">Zahlungsart</label><div class="col-sm-9 col-md-10"><div class="radio"><label><input type="radio" ng-model="paymode" value="later"> Sp&auml;ter bezahlen</label><div ng-show="paymode == \'later\'" class="animate-show" style="margin-left:25px"><small>Buchen sie jetzt und bezahlen sie bis zu 7 Tage vor Ihrer Reise</small></div></div><div class="radio"><label><input type="radio" ng-model="paymode" value="now"> Jetzt bezahlen</label><div ng-show="paymode == \'now\'" class="animate-show" style="margin-left:25px"><small>Zahlen sie jetzt sofort per <img src="https://www.paypal.com/de_DE/i/logo/PayPal_mark_37x23.gif"> oder Lastschrift</small></div></div></div></div><div class="form-group"><div class="col-sm-12"><button type="button" class="btn btn-success btn-block btn-lg" ng-click="submit()">Weiter <span class="fa fa-chevron-right"></span></button></div></div></form></div></div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/OrderConfirm.html',
    '<div class="row"><div class="col-md-12"><div class="panel panel-primary ng-cloak" ng-show="!redirecting"><div class="panel-heading"><h1 class="panel-title">Bestellung aufgeben</h1></div><div class="panel-body"><p>Vor dem Absenden Ihrer Bestellung haben Sie hier die M&ouml;glichkeit, die von Ihnen eingegebenen Daten und Leistungen zu korrigieren. Den Bestellvorgang k&ouml;nnen Sie jederzeit durch Schlie&szlig;en des Browser-Fensters beenden oder durch Dr&uuml;cken des Bestell-Buttons abschlie&szlig;en.</p><div class="row"><div class="col-sm-5"><h4>Rechnungsadresse <small><a href="#/order/{{requestId}}/{{offerId}}"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><address><span ng-if="request.organisation"><strong>{{request.organisation}}</strong><br>z.Hd.</span> <strong>{{request.name}}</strong><br>{{request.address}}<br>{{request.postcode}} {{request.town}}</address><h4>Kontakt <small><a href="#/order/{{requestId}}/{{offerId}}"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><div>Email: <strong>{{request.email}}</strong></div></div><div class="col-sm-7"><h4>Reisedaten <small><a href="#/request?r={{requestId}}&s=o"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><div class="row" style="margin-bottom:18px;"><div class="col-xs-2">Fahrt:</div><div class="col-xs-10">Von <strong>{{request.startName}}</strong> nach <strong>{{request.targetName}}</strong></div><div class="col-xs-offset-2 col-xs-10" ng-show="request.busShouldStay"><i class="fa fa-info-circle"></i> Bus bleibt vor Ort</div><div class="col-xs-2">Hinfahrt:</div><div class="col-xs-10">Am <strong>{{request.startDate | date}}</strong>, <span ng-show="request.startTimeMode == \'Departure\'">Abfahrt <strong>{{request.startTimeDepart}}</strong> (Ankunft ca. {{request.startTimeArrive}})</span> <span ng-show="request.startTimeMode == \'Arrival\'">Ankunft <strong>{{request.startTimeArrive}}</strong> (Abfahrt ca. {{request.startTimeDepart}})</span></div><div class="col-xs-2">R&uuml;ckfahrt:</div><div class="col-xs-10"><span ng-show="request.tripType == \'OneWay\'"><strong>Keine R&uuml;ckfahrt</strong></span> <span ng-show="request.tripType == \'Return\'">Am <strong>{{request.returnDate | date}}</strong>, <span ng-show="request.returnTimeMode == \'Departure\'">R&uuml;ckfahrt <strong>{{request.returnTimeDepart}}</strong> (R&uuml;ckkunft ca. {{request.returnTimeArrive}})</span> <span ng-show="request.returnTimeMode == \'Arrival\'">R&uuml;ckkunft <strong>{{request.returnTimeArrive}}</strong> (R&uuml;ckfahrt ca. {{request.returnTimeDepart}})</span></span></div><div class="col-xs-2">Personen:</div><div class="col-xs-10"><strong>{{request.passengers}}</strong></div></div><h4>Zahlungsweise <small><a href="#/order/{{requestId}}/{{offerId}}"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><div ng-show="paymode == \'later\'"><strong>Sp&auml;ter bezahlen</strong></div><div ng-hide="paymode == \'later\'"><strong>Jetzt bezahlen</strong></div></div></div><p><div class="checkbox" ng-class="acceptedStyle()"><label><input type="checkbox" ng-model="accepted"> Ich habe die <a href="http://static.paulfaehrtbus.de/agb" target="_blank">AGBs <span class="glyphicon glyphicon-new-window"></span></a> der Magnitude Internet GmbH gelesen und erkl&auml;re hiermit mein Einverst&auml;ndnis.</label></div></p><table class="table table-responsive table-striped table-bordered table-condensed"><tr><th>Leistung</th><th class="text-center">Beschreibung</th><th class="text-right">Preis</th></tr><tr><td><p style="font-weight:bold; font-size:large">{{offer.productName}}</p></td><td><div class="text-center" ng-bind-html="offer.safeProductDescription"></div></td><td class="text-right">{{offer.price | currency}}</td></tr><tr><td class="text-right" colspan="2"><strong>Zwischensumme:</strong></td><td class="text-right">{{offer.price | currency}}</td></tr><tr><td class="text-right" colspan="2">enthalten 19% MwSt.:</td><td class="text-right">{{offer.price * 0.19 | currency}}</td></tr><tr><td class="text-right lead" colspan="2"><strong>Gesamtpreis inkl. MwSt.:</strong></td><td class="text-right lead"><strong>{{offer.price | currency}}</strong></td></tr></table><div ng-show="submitted && !accepted" class="text-danger"><strong>Bitte stimmen Sie unseren AGBs zu (siehe oben)!</strong></div><button type="button" class="btn btn-success btn-block btn-lg" ng-click="submit()">Jetzt verbindlich buchen</button></div></div></div></div><div class="row ng-cloak" ng-show="redirecting"><div class="col-sm-6 col-sm-offset-3"><div class="panel panel-default"><div class="panel-body text-center"><p class="lead">Ihre Anfrage wird bearbeitet. Bitte warten...</p><img src="/Content/img/bigLoader.gif" style="margin-bottom:20px;"><div><small>Bitte dr&uuml;cken Sie nicht den Zur&uuml;ck-Knopf in Ihrem Browser</small></div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/Processing.html',
    '<div class="row"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="panel panel-default"><div class="panel-body text-center"><p class="lead">Ihre Transaktion wird bearbeitet. Bitte warten...</p><img src="/Content/img/bigLoader.gif" style="margin-bottom:20px;"><div><small>Bitte dr&uuml;cken Sie nicht den Zur&uuml;ck-Knopf in Ihrem Browser</small></div></div></div></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/Request.html',
    '<div class="row ng-cloak" ng-show="ctrl.initFinished"><div class="col-lg-12"><form name="ctrl.Request"><div class="panel panel-default hidden-print"><div class="panel-body"><div class="row"><div class="col-sm-4 col-md-4"><div class="form-group-lg has-feedback" ng-class="ctrl.startErrorClass()"><input class="form-control input-lg" type="text" id="StartName" name="StartName" ng-model="StartName" ng-keyup="ctrl.onStartNameEdit()" placeholder="Abfahrtsort (z.B. Berlin)" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.startErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.startErrorClass() == \'has-error\'"></span></div><div class="list-group" ng-show="ctrl.startPredictions.length > 0"><a style="cursor:pointer" class="list-group-item" ng-repeat="prediction in ctrl.startPredictions" ng-click="ctrl.setStartPlace(prediction)">{{prediction.description}}</a></div></div><div class="col-sm-4 col-md-4"><div class="form-group-lg has-feedback" ng-class="ctrl.targetErrorClass()"><input class="form-control input-lg" type="text" id="TargetName" name="TargetName" ng-model="TargetName" ng-keyup="ctrl.onTargetNameEdit()" placeholder="Zielort (z.B. Hamburg)" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.targetErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.targetErrorClass() == \'has-error\'"></span></div><div class="list-group" ng-show="ctrl.targetPredictions.length > 0"><a style="cursor:pointer" class="list-group-item" ng-repeat="prediction in ctrl.targetPredictions" ng-click="ctrl.setTargetPlace(prediction)">{{prediction.description}}</a></div></div><div class="col-sm-4 col-md-4 hidden-print"><button class="btn btn-primary btn-lg btn-block" type="button" ng-disabled="mapLoading"><span ng-show="ctrl.mapLoading"><span class="fa fa-fw fa-cog fa-spin"></span></span> <span ng-hide="ctrl.mapLoading">Weiter</span></button></div></div><div ng-if="ctrl.gacValidationMessage.length > 0" class="alert alert-warning"><span class="fa fa-exclamation-circle"></span> {{ctrl.gacValidationMessage}}</div></div></div><div class="panel panel-primary ng-cloak animate-show hidden-print" ng-show="ctrl.showMap" id="mapPanel"><div class="panel-heading"><h2 class="panel-title"><span class="fa fa-location-arrow"></span> Ihre Reise von {{StartName}} nach {{TargetName}}<small>{{ctrl.displayDistance()}}</small></h2></div><div id="map-canvas"></div><div class="panel-body"><div class="row"><div class="col-xs-6 col-sm-5"><div class="row"><div class="col-xs-5"><div><strong>Hinfahrt</strong></div></div><div class="col-xs-7"><div class="checkbox-inline" style="margin-top:-5px"><label style="margin-bottom:0"><input type="checkbox" ng-model="ctrl.busShouldStay" ng-change="ctrl.invalidate(\'dates\')"> Bus vor Ort</label></div></div></div><div class="form-group has-feedback" ng-class="ctrl.startDateErrorClass()" style="margin-bottom:0"><input class="form-control" type="text" id="StartDate" name="StartDate" ui-date="ctrl.dateOptionsStart" ng-model="StartDate" ng-keyup="ctrl.invalidate(\'dates\')" ng-change="ctrl.startDateChanged(StartDate)" placeholder="Hinfahrtsdatum" date-field="" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.startDateErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.startDateErrorClass() == \'has-error\'"></span></div><div>&nbsp;</div><div class="row"><div class="col-xs-12 col-sm-3 form-inline"><select ng-model="ctrl.StartTime" ng-init="ctrl.StartTime = \'09:00\'" ng-change="ctrl.invalidate(\'dates\')" class="form-control"><option value="00:00">00:00</option><option value="00:15">00:15</option><option value="00:30">00:30</option><option value="00:45">00:45</option><option value="01:00">01:00</option><option value="01:15">01:15</option><option value="01:30">01:30</option><option value="01:45">01:45</option><option value="02:00">02:00</option><option value="02:15">02:15</option><option value="02:30">02:30</option><option value="02:45">02:45</option><option value="03:00">03:00</option><option value="03:15">03:15</option><option value="03:30">03:30</option><option value="03:45">03:45</option><option value="04:00">04:00</option><option value="04:15">04:15</option><option value="04:30">04:30</option><option value="04:45">04:45</option><option value="05:00">05:00</option><option value="05:15">05:15</option><option value="05:30">05:30</option><option value="05:45">05:45</option><option value="06:00">06:00</option><option value="06:15">06:15</option><option value="06:30">06:30</option><option value="06:45">06:45</option><option value="07:00">07:00</option><option value="07:15">07:15</option><option value="07:30">07:30</option><option value="07:45">07:45</option><option value="08:00">08:00</option><option value="08:15">08:15</option><option value="08:30">08:30</option><option value="08:45">08:45</option><option value="09:00">09:00</option><option value="09:15">09:15</option><option value="09:30">09:30</option><option value="09:45">09:45</option><option value="10:00">10:00</option><option value="10:15">10:15</option><option value="10:30">10:30</option><option value="10:45">10:45</option><option value="11:00">11:00</option><option value="11:15">11:15</option><option value="11:30">11:30</option><option value="11:45">11:45</option><option value="12:00">12:00</option><option value="12:15">12:15</option><option value="12:30">12:30</option><option value="12:45">12:45</option><option value="13:00">13:00</option><option value="13:15">13:15</option><option value="13:30">13:30</option><option value="13:45">13:45</option><option value="14:00">14:00</option><option value="14:15">14:15</option><option value="14:30">14:30</option><option value="14:45">14:45</option><option value="15:00">15:00</option><option value="15:15">15:15</option><option value="15:30">15:30</option><option value="15:45">15:45</option><option value="16:00">16:00</option><option value="16:15">16:15</option><option value="16:30">16:30</option><option value="16:45">16:45</option><option value="17:00">17:00</option><option value="17:15">17:15</option><option value="17:30">17:30</option><option value="17:45">17:45</option><option value="18:00">18:00</option><option value="18:15">18:15</option><option value="18:30">18:30</option><option value="18:45">18:45</option><option value="19:00">19:00</option><option value="19:15">19:15</option><option value="19:30">19:30</option><option value="19:45">19:45</option><option value="20:00">20:00</option><option value="20:15">20:15</option><option value="20:30">20:30</option><option value="20:45">20:45</option><option value="21:00">21:00</option><option value="21:15">21:15</option><option value="21:30">21:30</option><option value="21:45">21:45</option><option value="22:00">22:00</option><option value="22:15">22:15</option><option value="22:30">22:30</option><option value="22:45">22:45</option><option value="23:00">23:00</option><option value="23:15">23:15</option><option value="23:30">23:30</option><option value="23:45">23:45</option></select></div><div class="col-xs-6 col-sm-3" ng-init="StartTimeMode = \'Departure\'"><div class="radio"><label><input type="radio" ng-model="ctrl.StartTimeMode" ng-change="ctrl.invalidate(\'dates\')" value="Departure"> Abfahrt</label></div></div><div class="col-xs-6 col-sm-6"><div class="radio"><label><input type="radio" ng-model="StartTimeMode" ng-change="ctrl.invalidate(\'dates\')" value="Arrival"> Ankunft</label></div></div></div></div><div class="col-xs-6 col-sm-5"><div class="row"><div class="col-xs-5"><div><strong>R&uuml;ckfahrt</strong></div></div><div class="col-xs-7"><div class="checkbox-inline" style="margin-top:-5px"><label style="margin-bottom:0"><input type="checkbox" ng-model="ctrl.isOneWay" ng-change="ctrl.invalidate(\'dates\')" ng-init="ctrl.isOneWay = false"> Keine R&uuml;ckfahrt</label></div></div></div><div class="form-group has-feedback" style="margin-bottom:0" ng-class="ctrl.returnDateErrorClass()" ng-hide="ctrl.isOneWay"><input class="form-control" type="text" id="ReturnDate" name="ReturnDate" ui-date="ctrl.dateOptionsReturn" ng-model="ReturnDate" placeholder="R&uuml;ckfahrtsdatum" ng-keyup="ctrl.invalidate(\'dates\')" ng-change="ctrl.returnDateChanged(ReturnDate)" date-field="" required="" autocomplete="off"> <span class="glyphicon glyphicon-ok form-control-feedback ng-cloak" ng-show="ctrl.returnDateErrorClass() == \'has-success\'"></span> <span class="glyphicon glyphicon-remove form-control-feedback ng-cloak" ng-show="ctrl.returnDateErrorClass() == \'has-error\'"></span></div><div>&nbsp;</div><div class="row" ng-hide="ctrl.isOneWay"><div class="col-xs-12 col-sm-3 form-inline"><select ng-model="ctrl.ReturnTime" ng-init="ctrl.ReturnTime = \'17:00\'" ng-change="ctrl.invalidate(\'dates\')" class="form-control"><option value="00:00">00:00</option><option value="00:15">00:15</option><option value="00:30">00:30</option><option value="00:45">00:45</option><option value="01:00">01:00</option><option value="01:15">01:15</option><option value="01:30">01:30</option><option value="01:45">01:45</option><option value="02:00">02:00</option><option value="02:15">02:15</option><option value="02:30">02:30</option><option value="02:45">02:45</option><option value="03:00">03:00</option><option value="03:15">03:15</option><option value="03:30">03:30</option><option value="03:45">03:45</option><option value="04:00">04:00</option><option value="04:15">04:15</option><option value="04:30">04:30</option><option value="04:45">04:45</option><option value="05:00">05:00</option><option value="05:15">05:15</option><option value="05:30">05:30</option><option value="05:45">05:45</option><option value="06:00">06:00</option><option value="06:15">06:15</option><option value="06:30">06:30</option><option value="06:45">06:45</option><option value="07:00">07:00</option><option value="07:15">07:15</option><option value="07:30">07:30</option><option value="07:45">07:45</option><option value="08:00">08:00</option><option value="08:15">08:15</option><option value="08:30">08:30</option><option value="08:45">08:45</option><option value="09:00">09:00</option><option value="09:15">09:15</option><option value="09:30">09:30</option><option value="09:45">09:45</option><option value="10:00">10:00</option><option value="10:15">10:15</option><option value="10:30">10:30</option><option value="10:45">10:45</option><option value="11:00">11:00</option><option value="11:15">11:15</option><option value="11:30">11:30</option><option value="11:45">11:45</option><option value="12:00">12:00</option><option value="12:15">12:15</option><option value="12:30">12:30</option><option value="12:45">12:45</option><option value="13:00">13:00</option><option value="13:15">13:15</option><option value="13:30">13:30</option><option value="13:45">13:45</option><option value="14:00">14:00</option><option value="14:15">14:15</option><option value="14:30">14:30</option><option value="14:45">14:45</option><option value="15:00">15:00</option><option value="15:15">15:15</option><option value="15:30">15:30</option><option value="15:45">15:45</option><option value="16:00">16:00</option><option value="16:15">16:15</option><option value="16:30">16:30</option><option value="16:45">16:45</option><option value="17:00">17:00</option><option value="17:15">17:15</option><option value="17:30">17:30</option><option value="17:45">17:45</option><option value="18:00">18:00</option><option value="18:15">18:15</option><option value="18:30">18:30</option><option value="18:45">18:45</option><option value="19:00">19:00</option><option value="19:15">19:15</option><option value="19:30">19:30</option><option value="19:45">19:45</option><option value="20:00">20:00</option><option value="20:15">20:15</option><option value="20:30">20:30</option><option value="20:45">20:45</option><option value="21:00">21:00</option><option value="21:15">21:15</option><option value="21:30">21:30</option><option value="21:45">21:45</option><option value="22:00">22:00</option><option value="22:15">22:15</option><option value="22:30">22:30</option><option value="22:45">22:45</option><option value="23:00">23:00</option><option value="23:15">23:15</option><option value="23:30">23:30</option><option value="23:45">23:45</option></select></div><div class="col-xs-6 col-sm-3"><div class="radio" ng-init="ctrl.ReturnTimeMode = \'Departure\'"><label><input type="radio" ng-model="ctrl.ReturnTimeMode" ng-change="ctrl.invalidate(\'dates\')" value="Departure"> Abfahrt</label></div></div><div class="col-xs-6 col-sm-6"><div class="radio"><label><input type="radio" ng-model="ctrl.ReturnTimeMode" ng-change="ctrl.invalidate(\'dates\')" value="Arrival"> Ankunft</label></div></div></div></div><div class="col-xs-12 col-sm-2 hidden-print"><button class="btn btn-primary btn-block btn-lg" type="button" ng-click="ctrl.submitDateSection()">Weiter</button></div></div></div></div><div class="panel panel-primary ng-cloak animate-show hidden-print" ng-show="ctrl.showNameSection" id="namePanel"><div class="panel-heading"><h2 class="panel-title"><span class="fa fa-flag-checkered"></span> Jetzt nur noch diese Angaben</h2></div><div class="panel-body"><p>Bitte geben Sie für ein unverbindliches Angebot oder eventuelle Rückfragen Ihre Kontaktdaten an.</p><div class="form-horizontalxx"><div class="row"><div class="col-sm-6"><div class="form-horizontal form-condensed"><div class="form-group" ng-class="ctrl.passengerErrorClass()"><label for="Passengers" class="col-sm-2 control-label">Personen</label><div class="col-sm-10"><input type="number" id="Passengers" name="Passengers" ng-model="Passengers" ng-keyup="ctrl.passengersEdited()" class="form-control" placeholder="Anzahl (ab 9 Personen)" required="" min="1"></div></div><div class="form-group" ng-class="ctrl.nameErrorClass()"><label for="Name" class="col-sm-2 control-label">Name</label><div class="col-sm-10"><input type="text" id="Name" name="Name" ng-model="Name" class="form-control" placeholder="Ihr vollst&auml;ndiger Vor- und Zuname" required=""></div></div></div></div><div class="col-sm-6"><div class="form-horizontal"><div class="form-group" ng-class="ctrl.emailErrorClass()"><label for="EMail" class="col-sm-2 control-label">E-Mail</label><div class="col-sm-10"><input type="email" id="EMail" name="EMail" ng-model="EMail" class="form-control" placeholder="Ihre E-Mail" required=""></div></div><div class="form-group" ng-class="ctrl.telephoneErrorClass()"><label for="Telephone" class="col-sm-2 control-label">Telefon</label><div class="col-sm-10"><input type="tel" id="Telephone" name="Telephone" ng-model="Telephone" class="form-control" placeholder="Ihre Telefonnummer" required=""></div></div></div></div></div><div class="form-group text-center">Spezielle W&uuml;nsche? Rufen Sie uns an unter <strong>0800 / 28 77 28 5</strong></div><div class="form-group hidden-print"><div class="col-sm-12 text-center"><button class="btn btn-primary btn-lg" type="button" ng-click="ctrl.submitNameSection()" ng-disabled="ctrl.offersLoading"><span ng-show="ctrl.offersLoading"><span class="fa fa-fw fa-cog fa-spin"></span></span> <span ng-hide="ctrl.offersLoading"><span class="fa fa-calculator"></span> unverbindliches Angebot Berechnen</span></button></div></div></div></div></div><div class="panel panel-primary ng-cloak animate-show" ng-show="ctrl.showOfferSection" id="offerPanel"><div class="panel-heading"><h2 class="panel-title">Unser Angebot f&uuml;r Ihre Fahrt von {{StartName}} nach {{TargetName}}</h2></div><div class="panel-body"><div class="row"><div class="col-sm-2 col-xs-4">Anfragenummer:</div><div class="col-sm-4 col-xs-8"><strong>{{ctrl.requestNumber}}</strong></div><div class="col-sm-2 col-xs-4">Personen:</div><div class="col-sm-4 col-xs-8"><strong>{{Passengers}}</strong></div><div class="col-sm-2 col-xs-4">Abfahrtsort:</div><div class="col-sm-4 col-xs-8"><strong>{{StartName}}</strong></div><div class="col-sm-2 col-xs-4">Reiseziel:</div><div class="col-sm-4 col-xs-8"><strong>{{TargetName}}</strong></div><div class="col-sm-offset-8 col-sm-4 col-xs-offset-4 col-xs-8" ng-show="ctrl.busShouldStay"><i class="fa fa-info-circle"></i> Bus bleibt vor Ort</div><div class="col-sm-2 col-xs-4">Hinfahrt:</div><div class="col-sm-4 col-xs-8"><strong>{{StartDate | date}}</strong></div><div class="col-sm-2 col-xs-4">R&uuml;ckfahrt:</div><div class="col-sm-4 col-xs-8" ng-hide="ctrl.isOneWay"><strong>{{ReturnDate | date}}</strong></div><div class="col-sm-4 col-xs-8" ng-show="ctrl.isOneWay"><strong>Keine R&uuml;ckfahrt</strong></div><div class="col-sm-2 col-xs-4" ng-show="ctrl.StartTimeMode == \'Departure\'">Abfahrt:</div><div class="col-sm-4 col-xs-8" ng-show="ctrl.StartTimeMode == \'Departure\'"><strong>{{ctrl.startTimeDepart}}</strong> (Ankunft ca. {{ctrl.startTimeArrive}})</div><div class="col-sm-2 col-xs-4" ng-show="ctrl.StartTimeMode == \'Arrival\'">Ankunft:</div><div class="col-sm-4 col-xs-8" ng-show="ctrl.StartTimeMode == \'Arrival\'"><strong>{{ctrl.startTimeArrive}}</strong> (Abfahrt ca. {{ctrl.startTimeDepart}})</div><div class="col-sm-2 col-xs-4" ng-show="!ctrl.isOneWay && ctrl.ReturnTimeMode == \'Departure\'">Abfahrt:</div><div class="col-sm-4 col-xs-8" ng-show="!ctrl.isOneWay && ctrl.ReturnTimeMode == \'Departure\'"><strong>{{ctrl.returnTimeDepart}}</strong> (Ankunft ca. {{ctrl.returnTimeArrive}})</div><div class="col-sm-2 col-xs-4" ng-show="!ctrl.isOneWay && ctrl.ReturnTimeMode == \'Arrival\'">R&uuml;ckkunft:</div><div class="col-sm-4 col-xs-8" ng-show="!ctrl.isOneWay && ctrl.ReturnTimeMode == \'Arrival\'"><strong>{{ctrl.returnTimeArrive}}</strong> (R&uuml;ckfahrt ca. {{ctrl.returnTimeDepart}})</div></div><div class="pull-right hidden-print" role="group"><button class="btn btn-primary btn-xs" type="button" ng-click="ctrl.showMailForm()"><span class="fa fa-mail-forward"></span> Per Mail senden...</button> <button class="btn btn-info btn-xs" type="button" ng-click="ctrl.print()"><span class="fa fa-print"></span> Ausdrucken</button></div><div class="clearfix"></div><div class="panel panel-default pull-right ng-cloak" ng-show="ctrl.isMailFormShown" style="max-width:300px;"><div class="panel-body"><div ng-hide="ctrl.mailSendSuccess" class="input-group input-group-sm"><input type="text" class="form-control input-sm" placeholder="Email" ng-model="ctrl.emailForSending"> <span class="input-group-btn"><button class="btn btn-primary btn-sm" type="button" ng-disabled="ctrl.emailBeingSent" ng-click="ctrl.sendMail()"><span ng-hide="ctrl.emailBeingSent"><span class="fa fa-envelope"></span> Senden</span> <span ng-show="ctrl.emailBeingSent"><span class="fa fa-fw fa-cog fa-spin"></span></span></button></span></div><div ng-show="ctrl.mailSendSuccess" class="text-success">Email erfolgreich versandt!</div></div></div><div class="clearfix"></div><hr><div ng-if="ctrl.offers.length == 0 && !offersLoading" class="lead text-center hidden-print">Leider k&ouml;nnen wir Ihnen im Moment kein Online-Angebot machen. Bitte rufen Sie uns an unter:<br><strong>0800 / 28 77 28 5</strong></div><div class="row visible-print"><div class="col-xs-4" ng-repeat="offer in ctrl.offers"><div class="panel panel-default"><div class="panel-heading"><h4 div="" class="panel-title text-center">{{offer.productName}}</h4></div><div class="panel-body"><h2 ng-if="!offer.noOffer" class="text-center"><strong>{{offer.price / Passengers | currency}}</strong>/p.P.</h2><p ng-if="!offer.noOffer" class="text-center"><small>Gesamt {{offer.price | currency}}</small></p><h2 ng-if="offer.noOffer" class="text-center">- €/p.P.</h2><p ng-if="offer.noOffer" class="text-center"><small>Gesamt - €</small></p><hr><div><div class="text-center" ng-bind-html="offer.safeProductDescription"></div></div></div></div></div></div><div class="visible-print text-center">Haben Sie Fragen oder spezielle W&uuml;nsche? Rufen Sie uns an unter <strong>0800 / 28 77 28 5</strong></div><div class="row hidden-print"><div class="col-sm-4" ng-repeat="offer in ctrl.offers"><div class="panel panel-default"><div class="panel-heading"><h4 div="" class="panel-title text-center">{{offer.productName}}</h4></div><div class="panel-body"><h2 ng-if="!offer.noOffer" class="text-center"><strong>{{offer.price / Passengers | currency}}</strong>/p.P.</h2><p ng-if="!offer.noOffer" class="text-center"><small>Gesamt {{offer.price | currency}}</small></p><h2 ng-if="offer.noOffer" class="text-center">- €/p.P.</h2><p ng-if="offer.noOffer" class="text-center"><small>Gesamt - €</small></p><hr><div style="min-height:100px;margin-bottom:10px;"><div class="text-center" ng-bind-html="offer.safeProductDescription"></div></div><a ng-if="!offer.noOffer" href="#/order/{{offer.requestId}}/{{offer.offerId}}" class="btn btn-success btn-lg btn-block hidden-print">Zum Angebot <span class="glyphicon glyphicon-chevron-right"></span></a> <a ng-if="offer.noOffer" class="btn btn-warning btn-lg btn-block hidden-print" href="#/specialRequest/{{requestId}}">Anfragen <span class="glyphicon glyphicon-chevron-right"></span></a></div></div></div></div></div></div></form></div></div>');
}]);
})();

(function(module) {
try {
  module = angular.module('pfb-views');
} catch (e) {
  module = angular.module('pfb-views', []);
}
module.run(['$templateCache', function($templateCache) {
  $templateCache.put('/views/SpecialRequest.html',
    '<div class="row"><div class="col-xs-12 col-lg-8 col-lg-offset-2"><div class="panel panel-default"><div class="panel-heading"><h1 class="panel-title">Haben Sie spezielle W&uuml;nsche?</h1></div><div class="panel-body"><p class="lead">Kein Problem! Sagen Sie uns, wie wir helfen k&ouml;nnen.</p><div class="well well-sm"><h4>Reisedaten <small><a href="#/request?r={{requestId}}&s=o"><span class="fa fa-pencil"></span> Bearbeiten</a></small></h4><div class="row"><div class="col-xs-2">Fahrt:</div><div class="col-xs-10">Von <strong>{{request.startName}}</strong> nach <strong>{{request.targetName}}</strong></div><div class="col-xs-offset-2 col-xs-10" ng-show="request.busShouldStay"><i class="fa fa-info-circle"></i> Bus bleibt vor Ort</div><div class="col-xs-2">Hinfahrt:</div><div class="col-xs-10">Am <strong>{{request.startDate | date}}</strong>, <span ng-show="request.startTimeMode == \'Departure\'">Abfahrt <strong>{{request.startTimeDepart}}</strong> (Ankunft ca. {{request.startTimeArrive}})</span> <span ng-show="request.startTimeMode == \'Arrival\'">Ankunft <strong>{{request.startTimeArrive}}</strong> (Abfahrt ca. {{request.startTimeDepart}})</span></div><div class="col-xs-2">R&uuml;ckfahrt:</div><div class="col-xs-10"><span ng-show="request.tripType == \'OneWay\'"><strong>Keine R&uuml;ckfahrt</strong></span> <span ng-show="request.tripType == \'Return\'">Am <strong>{{request.returnDate | date}}</strong>, <span ng-show="request.returnTimeMode == \'Departure\'">R&uuml;ckfahrt <strong>{{request.returnTimeDepart}}</strong> (R&uuml;ckkunft ca. {{request.returnTimeArrive}})</span> <span ng-show="request.returnTimeMode == \'Arrival\'">R&uuml;ckkunft <strong>{{request.returnTimeArrive}}</strong> (R&uuml;ckfahrt ca. {{request.returnTimeDepart}})</span></span></div><div class="col-xs-2">Personen:</div><div class="col-xs-10"><strong>{{request.passengers}}</strong></div></div></div><form class="form-horizontal" name="form" ng-hide="success"><div class="form-group"><label class="col-sm-2 control-label">Anfrage</label><div class="col-sm-10"><textarea rows="5" class="form-control" required="" ng-model="SpecialRequests" placeholder="Ihre Anforderungen"></textarea></div></div><div class="form-group"><div class="col-sm-10 col-sm-offset-2"><button type="submit" class="btn btn-primary btn-block btn-lg" ng-click="submit()"><span class="fa fa-envelope"></span> Anfragen</button></div></div></form><div class="alert alert-success" ng-show="success"><span class="fa fa-check-circle"></span> Vielen Dank! Wir melden uns umgehend bei Ihnen.</div></div></div></div></div>');
}]);
})();

var pfb;
(function (pfb) {
    var Config = (function () {
        function Config(routeProvider, locationProvider) {
            this.routeProvider = routeProvider;
            this.locationProvider = locationProvider;
            this.routeProvider
                .when('/', {
                reloadOnSearch: false,
                templateUrl: '/views/Landing.html',
                controller: 'LandingController as ctrl'
            })
                .when('/von-:startSearch', {
                reloadOnSearch: false,
                templateUrl: '/views/Landing.html',
                controller: 'LandingController as ctrl'
            })
                .when('/nach-:targetSearch', {
                reloadOnSearch: false,
                templateUrl: '/views/Landing.html',
                controller: 'LandingController as ctrl'
            })
                .when('/von-:startSearch/nach-:targetSearch', {
                reloadOnSearch: false,
                templateUrl: '/views/Landing.html',
                controller: 'LandingController as ctrl'
            })
                .when('/request', {
                reloadOnSearch: false,
                templateUrl: '/views/Request.html',
                controller: 'RequestController as ctrl'
            })
                .when('/order/:requestId/:offerId', {
                templateUrl: '/views/Order.html',
                controller: 'OrderController as ctrl',
                resolve: {
                    offer: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.offer($route.current.params.requestId, $route.current.params.offerId);
                        }],
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/orderconfirm/:requestId/:offerId/:paymode', {
                templateUrl: '/views/OrderConfirm.html',
                controller: 'OrderConfirmController as ctrl',
                resolve: {
                    offer: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.offer($route.current.params.requestId, $route.current.params.offerId);
                        }],
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/booking/:requestId', {
                templateUrl: '/views/Booking.html',
                controller: 'BookingController as ctrl',
                resolve: {
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/cannotQuote/:requestId', {
                templateUrl: '/views/CannotQuote.html',
                controller: 'CannotQuoteController as ctrl',
                resolve: {
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/offerExpired/:requestId', {
                templateUrl: '/views/OfferExpired.html',
                controller: 'OfferExpiredController as ctrl',
                resolve: {
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/specialRequest/:requestId', {
                templateUrl: '/views/SpecialRequest.html',
                controller: 'SpecialRequestController as ctrl',
                resolve: {
                    request: ['RequestService', '$route', function (RequestService, $route) {
                            return RequestService.get($route.current.params.requestId);
                        }]
                }
            })
                .when('/payment/:result/:requestId/:paymentId/:offerId', {
                templateUrl: '/views/Processing.html',
                controller: 'PaymentController as ctrl'
            })
                .otherwise({
                redirectTo: '/'
            });
            this.locationProvider.html5Mode(PFBConfig.html5Routing);
        }
        Config.$inject = ['$routeProvider', '$locationProvider'];
        return Config;
    })();
    var app = angular.module('pfb', ['pfb-views', 'ngAnimate', 'ngRoute', 'ui.bootstrap', 'ui.date']);
    app.config(Config);
})(pfb || (pfb = {}));
//# sourceMappingURL=app.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var BookingController = (function () {
            function BookingController(routeParamsService, windowService, sceService, timeOutService, mailerService, 
                //private analyticsService: Services.IAnalyticsService,
                request) {
                this.routeParamsService = routeParamsService;
                this.windowService = windowService;
                this.sceService = sceService;
                this.timeOutService = timeOutService;
                this.mailerService = mailerService;
                this.request = request;
                this.isMailFormShown = false;
                this.emailBeingSent = false;
                this.mailSendSuccess = false;
                this.requestId = routeParamsService["requestId"];
                this.emailForSending = request.email;
                // todo: analytics pageload
                this.request.safeProductDescription = this.sceService.trustAsHtml(this.request.productDescription);
                $("body,html").scrollTop(0);
            }
            BookingController.prototype.print = function () {
                this.windowService.print();
            };
            ;
            BookingController.prototype.showMailForm = function () {
                this.isMailFormShown = true;
            };
            BookingController.prototype.sendMail = function () {
                var _this = this;
                this.emailBeingSent = true;
                this.mailerService.sendMail({
                    Id: this.requestId,
                    Type: 'orderconfirmation',
                    Email: this.emailForSending
                }).then(function (result) {
                    _this.emailBeingSent = false;
                    _this.mailSendSuccess = true;
                    _this.timeOutService(function () {
                        _this.mailSendSuccess = false;
                        _this.isMailFormShown = false;
                    }, 2000);
                }, function (error) {
                    // TODO
                });
            };
            BookingController.$inject = ['$routeParams', '$window', '$sce', '$timeout', 'MailerService', 'request'];
            return BookingController;
        })();
        angular.module('pfb').controller('BookingController', BookingController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=BookingController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var CannotQuoteController = (function () {
            function CannotQuoteController(routeParamsService, requestService, request) {
                this.routeParamsService = routeParamsService;
                this.requestService = requestService;
                this.success = false;
                this.request = request;
                this.requestId = this.routeParamsService["requestId"];
                // TODO: Analytics
                $("body,html").scrollTop(0);
            }
            ;
            CannotQuoteController.prototype.submit = function () {
                var _this = this;
                $("body,html").scrollTop(0);
                this.requestService.update({
                    requestId: this.requestId,
                    name: this.Name,
                    email: this.EMail
                }).then(function () {
                    _this.success = true;
                }, function () { });
            };
            ;
            CannotQuoteController.$inject = ['$routeParams', 'RequestService', 'request'];
            return CannotQuoteController;
        })();
        angular.module('pfb').controller('CannotQuoteController', CannotQuoteController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=CannotQuoteController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var LandingController = (function () {
            function LandingController(locationService, routeParamsService, timeoutService, requestService, gacService, analyticsService, utilService) {
                var _this = this;
                this.locationService = locationService;
                this.routeParamsService = routeParamsService;
                this.timeoutService = timeoutService;
                this.requestService = requestService;
                this.gacService = gacService;
                this.analyticsService = analyticsService;
                this.utilService = utilService;
                this.requestId = '';
                this.startIsValid = false;
                this.targetIsValid = false;
                this.StartLatLng = null;
                this.TargetLatLng = null;
                this.StartCountry = '';
                this.TargetCountry = '';
                this.mapSubmitted = false;
                this.mapLoading = false;
                this.startAutocomplete = null;
                this.targetAutocomplete = null;
                this.startPredictions = [];
                this.targetPredictions = [];
                this.gacValidationMessage = '';
                this.ValueTrack = {};
                this.distance = 0;
                this.duration = 0;
                var valuetrack = this.locationService.search();
                if (valuetrack.hasOwnProperty('k')) {
                    this.ValueTrack.KeyWord = valuetrack.k;
                }
                if (valuetrack.hasOwnProperty('d')) {
                    this.ValueTrack.Device = valuetrack.d;
                }
                if (valuetrack.hasOwnProperty('m')) {
                    this.ValueTrack.MatchType = valuetrack.m;
                }
                this.locationService.search('k', null);
                this.locationService.search('d', null);
                this.locationService.search('m', null);
                if (this.routeParamsService["startSearch"] != '') {
                    var ss = this.routeParamsService["startSearch"];
                    this.gacService.autocomplete(this.routeParamsService["startSearch"]).then(function (predictions) {
                        _this.setStartPlace(predictions[0]);
                    });
                }
                if (this.routeParamsService["targetSearch"] != '') {
                    this.gacService.autocomplete(this.routeParamsService["targetSearch"]).then(function (predictions) {
                        _this.setTargetPlace(predictions[0]);
                    });
                }
                // TODO
                //this.$on('$viewContentLoaded', function (event) {
                //    this.analyticsService.pageView();
                //});
                $("body,html").scrollTop(0);
            }
            LandingController.prototype.startErrorClass = function () {
                if (!this.Request["StartName"].$dirty && !this.mapSubmitted) {
                    return '';
                }
                if (this.startIsValid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            ;
            LandingController.prototype.targetErrorClass = function () {
                if (!this.Request["TargetName"].$dirty && !this.mapSubmitted) {
                    return '';
                }
                if (this.targetIsValid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            ;
            LandingController.prototype.submitMap = function () {
                this.mapSubmitted = true;
            };
            ;
            LandingController.prototype.redirectIfReady = function () {
                var _this = this;
                if (this.StartLatLng == null || this.TargetLatLng == null) {
                    this.distance = 0;
                    this.duration = 0;
                    return;
                }
                this.analyticsService.buttonclick('landing');
                this.mapLoading = true;
                this.requestService.create()
                    .then(function (data) {
                    _this.requestId = data;
                    var newData = $.extend({}, _this.ValueTrack, {
                        RequestId: _this.requestId,
                        StartName: _this.Request["StartName"].$modelValue,
                        StartCountry: _this.StartCountry,
                        StartLat: _this.StartLat,
                        StartLon: _this.StartLon,
                        TargetName: _this.Request["TargetName"].$modelValue,
                        TargetCountry: _this.TargetCountry,
                        TargetLat: _this.TargetLat,
                        TargetLon: _this.TargetLon
                    });
                    return _this.requestService.update(newData);
                }).then(function (data) {
                    if (data.data.status == 'CannotQuote') {
                        _this.locationService.path('/cannotQuote/' + _this.requestId);
                    }
                    else {
                        _this.locationService.path('/request');
                        _this.locationService.search('r', _this.requestId);
                        _this.locationService.search('s', 'd');
                    }
                });
            };
            LandingController.prototype.onStartNameEdit = function () {
                var _this = this;
                this.startIsValid = false;
                this.gacValidationMessage = '';
                var newValue = this.Request["StartName"].$modelValue;
                if (newValue != '') {
                    this.gacService.autocomplete(newValue).then(function (predictions) {
                        _this.startPredictions = predictions;
                    }, function (error) {
                        _this.startPredictions = [];
                    });
                }
            };
            LandingController.prototype.onTargetNameEdit = function () {
                var _this = this;
                this.targetIsValid = false;
                this.gacValidationMessage = '';
                var newValue = this.Request["TargetName"].$modelValue;
                if (newValue != '') {
                    this.gacService.autocomplete(newValue).then(function (predictions) {
                        _this.targetPredictions = predictions;
                    }, function (error) {
                        _this.targetPredictions = [];
                    });
                }
            };
            LandingController.prototype.isCountry = function (place) {
                for (var typeId = 0; typeId < place.types.length; ++typeId) {
                    if (place.types[typeId] === 'country') {
                        return true;
                    }
                }
                return false;
            };
            LandingController.prototype.setStartPlace = function (place) {
                var _this = this;
                this.gacService.details(place.place_id).then(function (result) {
                    var place = result;
                    if (_this.isCountry(place)) {
                        _this.gacValidationMessage = 'Ein Land kann nicht als Abfahrtsort gewählt werden!';
                        return;
                    }
                    if (place.geometry) {
                        _this.gacValidationMessage = '';
                        var location = place.geometry.location;
                        _this.StartLat = location.lat;
                        _this.StartLon = location.lng;
                        if (place.formatted_address === 'Deutschland') {
                            _this.Request["StartName"].$setViewValue(place.name + ', ' + place.formatted_address);
                        }
                        else {
                            _this.Request["StartName"].$setViewValue(place.formatted_address);
                        }
                        _this.Request["StartName"].$render();
                        _this.startIsValid = true;
                        _this.startPredictions = [];
                        _this.StartLatLng = place.geometry.location;
                        _this.StartCountry = _this.utilService.getPlaceCountry(place);
                        _this.redirectIfReady();
                    }
                });
            };
            LandingController.prototype.setTargetPlace = function (place) {
                var _this = this;
                this.gacService.details(place.place_id).then(function (result) {
                    var place = result;
                    if (_this.isCountry(place)) {
                        _this.gacValidationMessage = 'Ein Land kann nicht als Ziel gewählt werden!';
                        return;
                    }
                    if (place.geometry) {
                        _this.gacValidationMessage = '';
                        var location = place.geometry.location;
                        _this.TargetLat = location.lat;
                        _this.TargetLon = location.lng;
                        if (place.formatted_address === 'Deutschland') {
                            _this.Request["TargetName"].$setViewValue(place.name + ', ' + place.formatted_address);
                        }
                        else {
                            _this.Request["TargetName"].$setViewValue(place.formatted_address);
                        }
                        _this.Request["TargetName"].$render();
                        _this.targetIsValid = true;
                        _this.targetPredictions = [];
                        _this.TargetLatLng = place.geometry.location;
                        _this.TargetCountry = _this.utilService.getPlaceCountry(place);
                        _this.redirectIfReady();
                    }
                });
            };
            LandingController.prototype.cumulativeOffset = function (element) {
                var top = 0, left = 0;
                do {
                    top += element.offsetTop || 0;
                    left += element.offsetLeft || 0;
                    element = element.offsetParent;
                } while (element);
                return {
                    top: top,
                    left: left
                };
            };
            ;
            LandingController.prototype.onDownArrowClick = function () {
                var _this = this;
                this.timeoutService(function () {
                    var nav = document.getElementById('mainNavbar');
                    var navHeight = nav.clientHeight;
                    var elm = document.getElementById('downArrow');
                    var st = _this.cumulativeOffset(elm).top; // - navHeight - 10;
                    //$log.info('nav is ' + navHeight + ' high, jumping to ' + st);
                    $("body,html").animate({ scrollTop: st }, "slow");
                });
            };
            LandingController.$inject = ['$location', '$routeParams', '$timeout', 'RequestService', 'gacService', 'AnalyticsService', 'UtilService'];
            return LandingController;
        })();
        angular.module('pfb').controller('LandingController', LandingController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=LandingController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var OfferExpiredController = (function () {
            function OfferExpiredController(locationService, routeParamsService, request) {
                this.locationService = locationService;
                this.routeParamsService = routeParamsService;
                this.success = false;
                this.request = request;
                this.requestId = this.routeParamsService["requestId"];
                this.locationService.search('r', null);
                this.locationService.search('s', null);
                // TODO: analytics
                $("body,html").scrollTop(0);
            }
            OfferExpiredController.$inject = ['$location', '$routeParams', 'request'];
            return OfferExpiredController;
        })();
        angular.module('pfb').controller('OfferExpiredController', OfferExpiredController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=OfferExpiredController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var OrderConfirmController = (function () {
            function OrderConfirmController(routeParamsService, sceService, logService, windowService, bookingService, request, offer) {
                this.routeParamsService = routeParamsService;
                this.sceService = sceService;
                this.logService = logService;
                this.windowService = windowService;
                this.bookingService = bookingService;
                this.reserve = {};
                this.redirecting = false;
                this.submitted = false;
                this.accepted = false;
                this.offer = offer;
                this.request = request;
                this.name = this.request.name;
                this.requestId = this.routeParamsService["requestId"];
                this.offerId = this.routeParamsService["offerId"];
                this.paymode = this.routeParamsService["paymode"];
                // TODO
                //$scope.$on('$viewContentLoaded', function (event) {
                //    analytics.pageView('/app/orderconfirm');
                //});
                this.offer.safeProductDescription = this.sceService.trustAsHtml(this.offer.productDescription);
                $("body,html").scrollTop(0);
            }
            OrderConfirmController.prototype.acceptedStyle = function () {
                if (!this.submitted) {
                    return '';
                }
                if (!this.accepted) {
                    return ['has-error', 'emphasised'];
                }
                else {
                    return 'has-success';
                }
            };
            ;
            OrderConfirmController.prototype.submit = function () {
                var _this = this;
                this.submitted = true;
                if (this.accepted) {
                    $("body,html").scrollTop(0);
                    this.redirecting = true;
                    this.bookingService.book({
                        RequestId: this.requestId,
                        OfferId: this.offerId,
                        PayMode: this.paymode
                    }).then(function (result) {
                        _this.logService.info(result);
                        if (result.result == 'Redirect') {
                            _this.windowService.location.href = result.data;
                        }
                    }, function (error) {
                        // TODO
                    });
                }
            };
            ;
            OrderConfirmController.$inject = ['$routeParams', '$sce', '$log', '$window', 'BookingService', 'request', 'offer'];
            return OrderConfirmController;
        })();
        angular.module('pfb').controller('OrderConfirmController', OrderConfirmController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=OrderConfirmController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var OrderController = (function () {
            function OrderController(locationService, routeParamsService, sceService, requestService, request, offer) {
                this.locationService = locationService;
                this.routeParamsService = routeParamsService;
                this.sceService = sceService;
                this.requestService = requestService;
                this.form = {};
                this.paymode = 'later';
                this.submitted = false;
                this.offer = offer;
                this.request = request;
                this.name = this.request.name;
                this.email = this.request.email;
                this.organisation = this.request.organisation;
                this.street = this.request.address;
                this.town = this.request.town;
                this.postcode = this.request.postcode;
                this.requestId = this.routeParamsService["requestId"];
                this.offerId = this.routeParamsService["offerId"];
                // TODO
                //$scope.$on('$viewContentLoaded', function (event) {
                //    analytics.pageView('/app/order');
                //});
                this.offer.safeProductDescription = this.sceService.trustAsHtml(this.offer.productDescription);
                $("body,html").scrollTop(0);
            }
            OrderController.prototype.nameValidClass = function () {
                if (!this.form.name.$dirty && !this.submitted) {
                    return '';
                }
                if (this.form.name.$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            OrderController.prototype.emailValidClass = function () {
                if (!this.form.email.$dirty && !this.submitted) {
                    return '';
                }
                if (this.form.email.$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            OrderController.prototype.streetValidClass = function () {
                if (!this.form.street.$dirty && !this.submitted) {
                    return '';
                }
                if (this.form.street.$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            OrderController.prototype.townValidClass = function () {
                if (!this.form.town.$dirty && !this.submitted) {
                    return '';
                }
                if (this.form.town.$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            OrderController.prototype.postcodeValidClass = function () {
                if (!this.form.postcode.$dirty && !this.submitted) {
                    return '';
                }
                if (this.form.postcode.$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            OrderController.prototype.submit = function () {
                var _this = this;
                this.submitted = true;
                if (this.form.$valid) {
                    var newData = {
                        requestId: this.requestId,
                        name: this.name,
                        email: this.email,
                        organisation: this.organisation,
                        address: this.street,
                        town: this.town,
                        postcode: this.postcode,
                    };
                    this.requestService.update(newData).then(function () {
                        _this.locationService.path('/orderconfirm/' + _this.requestId + '/' + _this.offerId + '/' + _this.paymode);
                    }, function () {
                        // TODO
                    });
                }
            };
            ;
            OrderController.$inject = ['$location', '$routeParams', '$sce', 'RequestService', 'request', 'offer'];
            return OrderController;
        })();
        angular.module('pfb').controller('OrderController', OrderController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=OrderController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var PaymentController = (function () {
            function PaymentController(locationService, routeParamsService, bookingService) {
                var _this = this;
                this.locationService = locationService;
                this.routeParamsService = routeParamsService;
                this.bookingService = bookingService;
                if (this.locationService.path().lastIndexOf('/payment/', 0) === 0) {
                    this.bookingService.pay({
                        requestId: this.routeParamsService["requestId"],
                        paymentId: this.routeParamsService["paymentId"],
                        result: this.routeParamsService["result"]
                    }).then(function (result) {
                        _this.locationService.path('/booking/' + _this.routeParamsService["requestId"]);
                    }, function (error) {
                        _this.locationService.path('/offer/' + _this.routeParamsService["requestId"] + '/' + _this.routeParamsService["offerId"]);
                    });
                }
            }
            PaymentController.$inject = ['$location', '$routeParams', 'BookingService'];
            return PaymentController;
        })();
        angular.module('pfb').controller('PaymentController', PaymentController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=PaymentController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var RequestController = (function () {
            function RequestController(locationService, logService, sceService, qService, timeoutService, windowService, requestService, gacService, utilService, analyticsService, mailerService) {
                this.locationService = locationService;
                this.logService = logService;
                this.sceService = sceService;
                this.qService = qService;
                this.timeoutService = timeoutService;
                this.windowService = windowService;
                this.requestService = requestService;
                this.gacService = gacService;
                this.utilService = utilService;
                this.analyticsService = analyticsService;
                this.mailerService = mailerService;
                this.locked = true;
                this.requestId = '';
                this.startIsValid = false;
                this.targetIsValid = false;
                this.startPredictions = [];
                this.targetPredictions = [];
                this.StartCountry = '';
                this.TargetCountry = '';
                this.showMap = false;
                this.showNameSection = false;
                this.distance = 0;
                this.duration = 0;
                this.map = null;
                this.StartLatLng = null;
                this.TargetLatLng = null;
                this.ds = new google.maps.DirectionsService();
                this.dr = new google.maps.DirectionsRenderer();
                this.offers = [];
                this.initFinished = false;
                this.mapLoading = false;
                this.offersLoading = false;
                this.requestNumber = 0;
                this.gacValidationMessage = '';
                this.dateSectionSubmitted = false;
                this.startTimeArrive = '';
                this.startTimeDepart = '';
                this.returnTimeArrive = '';
                this.returnTimeDepart = '';
                this.nameSectionSubmitted = false;
                this.isMailFormShown = false;
                this.emailForSending = "";
                this.emailBeingSent = false;
                this.mailSendSuccess = false;
                this.showOfferSection = false;
                this.busShouldStay = false;
                this.isOneWay = false;
                this.dateOptionsStart = $.extend({}, $.datepicker.regional["de"], {
                    minDate: "+1w",
                    numberOfMonths: 3,
                });
                this.dateOptionsReturn = $.extend({}, $.datepicker.regional["de"], {
                    minDate: "+1w",
                    numberOfMonths: 3,
                });
                this.detectInitialState();
            }
            RequestController.prototype.startErrorClass = function () {
                if (this.startIsValid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            ;
            RequestController.prototype.targetErrorClass = function () {
                if (this.targetIsValid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            ;
            RequestController.prototype.onStartNameEdit = function () {
                var _this = this;
                if (!this.initFinished) {
                    return;
                }
                this.gacValidationMessage = '';
                var newValue = this.Request["StartName"].$modelValue;
                this.startIsValid = false;
                this.getRequestId().then(function () {
                    _this.setStatus('');
                    if (newValue != '') {
                        _this.gacService.autocomplete(newValue).then(function (predictions) {
                            _this.startPredictions = predictions;
                        }, function (error) {
                            _this.startPredictions = [];
                        });
                    }
                });
            };
            RequestController.prototype.onTargetNameEdit = function () {
                var _this = this;
                if (!this.initFinished) {
                    return;
                }
                this.gacValidationMessage = '';
                var newValue = this.Request["TargetName"].$modelValue;
                this.targetIsValid = false;
                this.getRequestId().then(function () {
                    _this.setStatus('');
                    if (newValue != '') {
                        _this.targetIsValid = false;
                        _this.gacService.autocomplete(newValue).then(function (predictions) {
                            _this.targetPredictions = predictions;
                        }, function (error) {
                            _this.targetPredictions = [];
                        });
                    }
                });
            };
            RequestController.prototype.isCountry = function (place) {
                for (var typeId = 0; typeId < place.types.length; ++typeId) {
                    if (place.types[typeId] === 'country') {
                        return true;
                    }
                }
                return false;
            };
            RequestController.prototype.setStartPlace = function (place) {
                var _this = this;
                this.gacService.details(place.place_id).then(function (result) {
                    var place = result;
                    if (_this.isCountry(place)) {
                        _this.gacValidationMessage = 'Ein Land kann nicht als Abfahrtsort gewählt werden!';
                        return;
                    }
                    if (place.geometry) {
                        _this.gacValidationMessage = '';
                        var location = place.geometry.location;
                        _this.StartLat = location.lat;
                        _this.StartLon = location.lng;
                        if (place.formatted_address === 'Deutschland') {
                            _this.Request["StartName"].$setViewValue(place.name + ', ' + place.formatted_address);
                        }
                        else {
                            _this.Request["StartName"].$setViewValue(place.formatted_address);
                        }
                        _this.Request["StartName"].$render();
                        _this.startIsValid = true;
                        _this.startPredictions = [];
                        _this.StartLatLng = new google.maps.LatLng(location.lat, location.lng);
                        _this.StartCountry = _this.utilService.getPlaceCountry(place);
                        _this.renderMapIfReady(true);
                    }
                });
            };
            RequestController.prototype.setTargetPlace = function (place) {
                var _this = this;
                this.gacService.details(place.place_id).then(function (result) {
                    var place = result;
                    if (_this.isCountry(place)) {
                        _this.gacValidationMessage = 'Ein Land kann nicht als Ziel gewählt werden!';
                        return;
                    }
                    if (place.geometry) {
                        _this.gacValidationMessage = '';
                        var location = place.geometry.location; // TS defs out of sync :(
                        _this.TargetLat = location.lat;
                        _this.TargetLon = location.lng;
                        if (place.formatted_address === 'Deutschland') {
                            _this.Request["TargetName"].$setViewValue(place.name + ', ' + place.formatted_address);
                        }
                        else {
                            _this.Request["TargetName"].$setViewValue(place.formatted_address);
                        }
                        _this.Request["TargetName"].$render();
                        _this.targetIsValid = true;
                        _this.targetPredictions = [];
                        _this.TargetLatLng = place.geometry.location;
                        _this.TargetLatLng = new google.maps.LatLng(location.lat, location.lng);
                        _this.TargetCountry = _this.utilService.getPlaceCountry(place);
                        _this.renderMapIfReady(true);
                    }
                });
            };
            RequestController.prototype.setStatus = function (status) {
                var _this = this;
                if (this.locked) {
                    this.locationService.search('s', 'o');
                    status = 'o';
                }
                this.locationService.search('s', status);
                if (status === 'd') {
                    this.utilService.scrollTo('mapPanel');
                    this.showMap = true;
                    this.showNameSection = false;
                    this.showOfferSection = false;
                    this.analyticsService.pageview('/app/dates');
                }
                else if (status === 'n') {
                    this.showMap = true;
                    this.showNameSection = true;
                    this.showOfferSection = false;
                    this.utilService.scrollTo('namePanel');
                    this.analyticsService.pageview('/app/passengers');
                }
                else if (status === 'o') {
                    this.locked = true;
                    this.offersLoading = true;
                    this.requestService.offers(this.requestId).then(function (data) {
                        _this.offers = data;
                        angular.forEach(_this.offers, function (value) {
                            value.safeProductDescription = _this.sceService.trustAsHtml(value.productDescription);
                        });
                        _this.offersLoading = false;
                    });
                    this.showMap = true;
                    this.showNameSection = true;
                    this.showOfferSection = true;
                    this.utilService.scrollTo('offerPanel');
                    this.analyticsService.pageview('/app/offers');
                }
                else {
                    this.showMap = false;
                    this.showNameSection = false;
                    this.showOfferSection = false;
                    this.analyticsService.pageview('/app/places');
                }
            };
            RequestController.prototype.pad2Digits = function (num) {
                var s = "0" + num;
                return s.substr(s.length - 2);
            };
            RequestController.prototype.getRequestId = function () {
                var _this = this;
                var deferred = this.qService.defer();
                if (this.locked) {
                    this.requestService.create().then(function (id) {
                        _this.locationService.search('r', id);
                        _this.requestId = id;
                        _this.locked = false;
                        _this.showOfferSection = false;
                    }, function (error) {
                        deferred.reject(error);
                    });
                }
                else {
                    deferred.resolve();
                }
                return deferred.promise;
            };
            ;
            RequestController.prototype.save = function (newStatus) {
                var _this = this;
                var deferred = this.qService.defer();
                this.getRequestId().then(function () {
                    var startDate = _this.Request["StartDate"].$modelValue;
                    var newData = {
                        requestId: _this.requestId,
                        startName: _this.Request["StartName"].$modelValue,
                        startCountry: _this.StartCountry,
                        startLat: _this.StartLat,
                        startLon: _this.StartLon,
                        targetName: _this.Request["TargetName"].$modelValue,
                        targetCountry: _this.TargetCountry,
                        targetLat: _this.TargetLat,
                        targetLon: _this.TargetLon,
                        distance: _this.distance,
                        duration: _this.duration,
                        startDate: _this.utilService.isoDateString(_this.Request["StartDate"].$modelValue),
                        startTime: _this.StartTime,
                        startTimeMode: _this.StartTimeMode,
                        returnDate: _this.utilService.isoDateString(_this.Request["ReturnDate"].$modelValue),
                        returnTime: _this.ReturnTime,
                        returnTimeMode: _this.ReturnTimeMode,
                        passengers: _this.Request["Passengers"].$modelValue,
                        name: _this.Request["Name"].$modelValue,
                        email: _this.Request["EMail"].$modelValue,
                        phone: _this.Request["Telephone"].$modelValue,
                        tripType: _this.isOneWay ? 'OneWay' : 'Return',
                        busShouldStay: _this.busShouldStay
                    };
                    return _this.requestService.update(newData);
                }, function (error) {
                    deferred.reject(error);
                }).then(function (request) {
                    if (request.status == 'CannotQuote') {
                        _this.locationService.path('/cannotQuote/' + _this.requestId);
                        _this.locationService.search({});
                    }
                    _this.startTimeArrive = request.startTimeArrive;
                    _this.startTimeDepart = request.startTimeDepart;
                    _this.returnTimeArrive = request.returnTimeArrive;
                    _this.returnTimeDepart = request.returnTimeDepart;
                    _this.requestNumber = request.number;
                    if (newStatus) {
                        _this.setStatus(newStatus.valueOf());
                    }
                    deferred.resolve(request);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            RequestController.prototype.invalidate = function (fieldName) {
                if (!this.initFinished) {
                    return;
                }
                if (fieldName === 'start') {
                    this.startIsValid = false;
                    this.StartLatLng = null;
                    this.locationService.search('s', '');
                    this.showMap = false;
                    this.showNameSection = false;
                    this.showOfferSection = false;
                }
                else if (fieldName === 'target') {
                    this.targetIsValid = false;
                    this.TargetLatLng = null;
                    this.locationService.search('s', '');
                    this.showMap = false;
                    this.showNameSection = false;
                    this.showOfferSection = false;
                }
                else if (fieldName === 'dates') {
                    this.locationService.search('s', 'd');
                    this.showNameSection = false;
                    this.showOfferSection = false;
                    this.showOfferSection = false;
                }
            };
            ;
            RequestController.prototype.displayDistance = function () {
                if (this.duration == 0) {
                    return '';
                }
                var durationHours = Math.floor(this.duration / 60);
                var durationMinutes = this.duration - durationHours * 60;
                var result = ' ' + this.distance + ' km, ';
                if (durationHours == 0) {
                }
                else if (durationHours == 1) {
                    result = result + ' 1 Stunde ';
                }
                else {
                    result = result + durationHours + ' Stunden ';
                }
                if (durationMinutes == 1) {
                    result = result + ' 1 Minute';
                }
                else {
                    result = result + durationMinutes + ' Minuten';
                }
                return result;
            };
            RequestController.prototype.renderMapIfReady = function (postBack) {
                var _this = this;
                if (this.StartLatLng == null || this.TargetLatLng == null) {
                    this.distance = 0;
                    this.duration = 0;
                    return;
                }
                this.mapLoading = true;
                this.showMap = true;
                this.timeoutService(function () {
                    if (_this.map == null) {
                        var mapOptions = {
                            scrollwheel: false,
                            navigationControl: false,
                            mapTypeControl: false,
                            scaleControl: false,
                            draggable: false,
                            mapTypeId: google.maps.MapTypeId.ROADMAP,
                            center: new google.maps.LatLng(50, 10),
                            zoom: 5
                        };
                        _this.map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
                        _this.dr.setMap(_this.map);
                    }
                    if (postBack) {
                        _this.utilService.scrollTo('mapPanel');
                    }
                    _this.ds.route({
                        origin: _this.StartLatLng,
                        destination: _this.TargetLatLng,
                        travelMode: google.maps.TravelMode.DRIVING,
                        unitSystem: google.maps.UnitSystem.METRIC
                    }, function (result, status) {
                        if (status == google.maps.DirectionsStatus.OK) {
                            _this.dr.setDirections(result);
                            if (postBack) {
                                _this.save().then(function (data) {
                                    _this.distance = data.distance;
                                    _this.duration = data.duration;
                                    _this.setStatus('d');
                                    _this.mapLoading = false;
                                });
                            }
                            else {
                                _this.mapLoading = false;
                            }
                            ;
                        }
                        else {
                            _this.distance = 0;
                            _this.duration = 0;
                            _this.mapLoading = false;
                        }
                    });
                });
            };
            RequestController.prototype.startDateChanged = function (val) {
                this.dateOptionsReturn.minDate = val;
                this.Request["ReturnDate"].$setViewValue(val);
                this.Request["ReturnDate"].$render();
                this.invalidate('dates');
            };
            RequestController.prototype.returnDateChanged = function (val) {
                this.dateOptionsStart.maxDate = val;
                this.invalidate('dates');
            };
            RequestController.prototype.isDateSectionValid = function () {
                return this.Request["StartDate"].$valid && this.Request["ReturnDate"].$valid;
            };
            ;
            RequestController.prototype.startDateErrorClass = function () {
                if (!this.Request["StartDate"].$dirty && !this.dateSectionSubmitted) {
                    return '';
                }
                if (this.Request["StartDate"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.returnDateErrorClass = function () {
                if (!this.Request["ReturnDate"].$dirty && !this.dateSectionSubmitted) {
                    return '';
                }
                if (this.Request["ReturnDate"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.submitDateSection = function () {
                this.dateSectionSubmitted = true;
                this.analyticsService.buttonclick('dates');
                if (this.isDateSectionValid()) {
                    this.save('n');
                }
            };
            RequestController.prototype.passengersEdited = function () {
                var _this = this;
                if (!this.initFinished) {
                    return;
                }
                if (this.locked) {
                    this.nameSectionSubmitted = false;
                    this.getRequestId().then(function () {
                        _this.save('n');
                    });
                }
            };
            RequestController.prototype.passengerErrorClass = function () {
                if (!this.Request["Passengers"].$dirty && !this.nameSectionSubmitted) {
                    return '';
                }
                if (this.Request["Passengers"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.nameErrorClass = function () {
                if (!this.Request["Name"].$dirty && !this.nameSectionSubmitted) {
                    return '';
                }
                if (this.Request["Name"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.emailErrorClass = function () {
                if (!this.Request["EMail"].$dirty && !this.nameSectionSubmitted) {
                    return '';
                }
                if (this.Request["EMail"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.telephoneErrorClass = function () {
                if (!this.Request["Telephone"].$dirty && !this.nameSectionSubmitted) {
                    return '';
                }
                if (this.Request["Telephone"].$valid) {
                    return 'has-success';
                }
                else {
                    return 'has-error';
                }
            };
            RequestController.prototype.nameSectionValid = function () {
                return this.Request.$valid;
            };
            RequestController.prototype.submitNameSection = function () {
                var _this = this;
                this.nameSectionSubmitted = true;
                this.analyticsService.buttonclick('passengers');
                if (this.nameSectionValid()) {
                    this.offersLoading = true;
                    this.save().then(function () {
                        _this.analyticsService.offersdisplayed();
                        _this.setStatus('o');
                    });
                }
            };
            RequestController.prototype.detectInitialState = function () {
                var _this = this;
                var state = this.locationService.search();
                if (state.hasOwnProperty('r')) {
                    this.requestId = state.r;
                    this.requestService.get(state.r).then(function (data) {
                        _this.requestNumber = data.number;
                        if (data.hasOwnProperty('startLat')) {
                            _this.Request["StartName"].$setViewValue(data.startName);
                            _this.Request["StartName"].$render();
                            _this.StartCountry = data.startCountry;
                            _this.StartLat = data.startLat;
                            _this.StartLon = data.startLon;
                            _this.StartLatLng = new google.maps.LatLng(data.startLat, data.startLon);
                            _this.startIsValid = true;
                            _this.Request["TargetName"].$setViewValue(data.targetName);
                            _this.Request["TargetName"].$render();
                            _this.TargetCountry = data.targetCountry;
                            _this.TargetLat = data.targetLat;
                            _this.TargetLon = data.targetLon;
                            _this.TargetLatLng = new google.maps.LatLng(data.targetLat, data.targetLon);
                            _this.targetIsValid = true;
                            _this.distance = data.distance;
                            _this.duration = data.duration;
                            _this.renderMapIfReady(false);
                        }
                        if (data.startDate != null) {
                            var sDate = new Date(data.startDate);
                            var rDate = new Date(data.returnDate);
                            _this.Request["StartDate"].$setViewValue(sDate);
                            _this.Request["StartDate"].$render();
                            _this.StartTime = _this.pad2Digits(sDate.getUTCHours()) + ':' + _this.pad2Digits(sDate.getUTCMinutes());
                            _this.Request["ReturnDate"].$setViewValue(rDate);
                            _this.Request["ReturnDate"].$render();
                            _this.ReturnTime = _this.pad2Digits(rDate.getUTCHours()) + ':' + _this.pad2Digits(rDate.getUTCMinutes());
                            _this.startTimeArrive = data.startTimeArrive;
                            _this.startTimeDepart = data.startTimeDepart;
                            _this.returnTimeArrive = data.returnTimeArrive;
                            _this.returnTimeDepart = data.returnTimeDepart;
                            _this.StartTimeMode = data.startTimeMode;
                            _this.ReturnTimeMode = data.returnTimeMode;
                        }
                        _this.busShouldStay = data.busShouldStay;
                        if (data.tripType == 'OneWay') {
                            _this.isOneWay = true;
                        }
                        else {
                            _this.isOneWay = false;
                        }
                        if (data.passengers > 0) {
                            _this.Request["Passengers"].$setViewValue(data.passengers);
                            _this.Request["Passengers"].$render();
                        }
                        _this.Request["Name"].$setViewValue(data.name);
                        _this.Request["Name"].$render();
                        _this.Request["EMail"].$setViewValue(data.email);
                        _this.Request["EMail"].$render();
                        _this.Request["Telephone"].$setViewValue(data.phone);
                        _this.Request["Telephone"].$render();
                        _this.locked = data.isLocked;
                        if (_this.locked) {
                            if (state.s === 'recalc') {
                                _this.locationService.search('s', 'n');
                                state.s = 'n';
                                data.isOfferExpired = false;
                            }
                            else {
                                _this.locationService.search('s', 'o');
                                state.s = 'o';
                            }
                        }
                        if (state.s === 'd') {
                            _this.utilService.scrollTo('mapPanel');
                            _this.analyticsService.pageview('/app/dates');
                        }
                        else if (state.s === 'n') {
                            _this.showNameSection = true;
                            _this.utilService.jumpTo('namePanel');
                            _this.analyticsService.pageview('/app/passengers');
                        }
                        else if (state.s === 'o') {
                            _this.locked = true;
                            _this.offersLoading = true;
                            _this.requestService.offers(_this.requestId).then(function (data) {
                                _this.offers = data;
                                angular.forEach(_this.offers, function (value) {
                                    value.safeProductDescription = _this.sceService.trustAsHtml(value.productDescription);
                                });
                                _this.offersLoading = false;
                            });
                            _this.showNameSection = true;
                            _this.showOfferSection = true;
                            _this.utilService.jumpTo('offerPanel');
                            _this.analyticsService.pageview('/app/offers');
                        }
                        else {
                            _this.analyticsService.pageview('/app/places');
                        }
                        if (data.isOfferExpired) {
                            _this.locationService.path('/offerExpired/' + _this.requestId);
                        }
                        _this.initFinished = true;
                    }, function (error) {
                        _this.logService.error(error);
                    });
                }
                else {
                    this.initFinished = true;
                    this.analyticsService.pageview('/app/places');
                }
            };
            RequestController.prototype.print = function () {
                this.windowService.print();
            };
            ;
            RequestController.prototype.showMailForm = function () {
                this.emailForSending = this.Request["EMail"].$modelValue;
                this.isMailFormShown = true;
            };
            RequestController.prototype.sendMail = function () {
                var _this = this;
                this.emailBeingSent = true;
                this.mailerService.sendMail({
                    Id: this.requestId,
                    Type: 'offer',
                    Email: this.emailForSending
                }).then(function () {
                    _this.emailBeingSent = false;
                    _this.mailSendSuccess = true;
                    _this.timeoutService(function () {
                        _this.mailSendSuccess = false;
                        _this.isMailFormShown = false;
                    }, 2000);
                });
            };
            RequestController.$inject = [
                '$location', '$log', '$sce', '$q', '$timeout', '$window',
                'RequestService', 'gacService', 'UtilService', 'AnalyticsService', 'MailerService'];
            return RequestController;
        })();
        angular.module('pfb').controller('RequestController', RequestController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=RequestController.js.map
var pfb;
(function (pfb) {
    var Controllers;
    (function (Controllers) {
        var SpecialRequestController = (function () {
            function SpecialRequestController(routeParamsService, requestService, request) {
                this.routeParamsService = routeParamsService;
                this.requestService = requestService;
                this.success = false;
                this.request = request;
                this.requestId = this.routeParamsService["requestId"];
                // TODO: Analytics
                //$scope.$on('$viewContentLoaded', function (event) {
                //    analytics.pageView('/app/specialrequest');
                //});
                $("body,html").scrollTop(0);
            }
            SpecialRequestController.prototype.submit = function () {
                var _this = this;
                $("body,html").scrollTop(0);
                this.requestService.update({
                    requestId: this.requestId,
                    hasSpecialRequests: true,
                    specialRequests: this.SpecialRequests
                }).then(function () {
                    _this.success = true;
                }, function () {
                    // TODO
                });
            };
            ;
            SpecialRequestController.$inject = ['$routeParams', 'RequestService', 'request'];
            return SpecialRequestController;
        })();
        angular.module('pfb').controller('SpecialRequestController', SpecialRequestController);
    })(Controllers = pfb.Controllers || (pfb.Controllers = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=SpecialRequestController.js.map
angular.module('pfb').directive('dateField', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function (scope, element, attr, ngModel) {
            function toUser(date) {
                if (typeof (date) == 'undefined') {
                    return '';
                }
                var curr_date = date.getDate();
                var curr_month = date.getMonth();
                var curr_year = date.getFullYear();
                return curr_date + "." + (curr_month + 1) + "." + curr_year;
            }

            ngModel.$formatters.push(toUser);
        }
    };
})
angular.module('pfb').directive('viewportHeight', ['$window', function ($window) {
    return {
        restrict: 'A',
        link: function (scope, element) {
            var w = angular.element($window);
            scope.getWindowDimensions = function () {
                return { 'h': w.height(), 'w': w.width() };
            };
            scope.$watch(scope.getWindowDimensions, function (newValue, oldValue) {
                scope.windowHeight = newValue.h;
                scope.windowWidth = newValue.w;

                scope.style = function () {
                    if (newValue.w < 768) {
                        return {};
                    }
                    else {
                        return {
                            'padding-top': (newValue.h - 700) / 2,//140)/6,
                            'height': (newValue.h - 140) + 'px'//,
                            //'width': (newValue.w - 100) + 'px'
                        };
                    }
                };

            }, true);

            w.bind('resize', function () {
                scope.$apply();
            });
        }
    };
}])
//# sourceMappingURL=Booking.js.map
//# sourceMappingURL=Mail.js.map
//# sourceMappingURL=Offer.js.map
//# sourceMappingURL=PFBConfig.js.map
//# sourceMappingURL=Payment.js.map
//# sourceMappingURL=Request.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var AnalyticsService = (function () {
            function AnalyticsService(windowService, locationService, logService) {
                this.windowService = windowService;
                this.locationService = locationService;
                this.logService = logService;
            }
            AnalyticsService.prototype.pageview = function (page) {
                if (page) {
                    this.ga('send', 'pageview', { page: page });
                }
                else {
                    this.ga('send', 'pageview', { page: this.locationService.url() });
                }
            };
            AnalyticsService.prototype.buttonclick = function (label) {
                this.ga('send', 'event', 'button', 'click', label);
            };
            AnalyticsService.prototype.offersdisplayed = function () {
                this.ga('send', 'event', 'quotation', 'display', 'offers');
            };
            AnalyticsService.prototype.ga = function (a, b, c, d, e) {
                if (typeof (this.windowService["ga"]) == "function") {
                    this.windowService["ga"](a, b, c, d, e);
                }
            };
            AnalyticsService.$inject = ['$window', '$location', '$log'];
            return AnalyticsService;
        })();
        angular.module('pfb')
            .service('AnalyticsService', AnalyticsService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=AnalyticsService.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var BookingService = (function () {
            function BookingService(httpService, qService) {
                this.httpService = httpService;
                this.qService = qService;
            }
            BookingService.prototype.book = function (data) {
                return this.httpService.post(PFBConfig.apiEndpoint + 'booking', data);
            };
            BookingService.prototype.pay = function (data) {
                return this.httpService.post(PFBConfig.apiEndpoint + 'paymentresult', data);
            };
            BookingService.$inject = ['$http', '$q'];
            return BookingService;
        })();
        angular.module('pfb').service('BookingService', BookingService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=BookingService.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var GACService = (function () {
            function GACService(httpService, qService) {
                this.httpService = httpService;
                this.qService = qService;
            }
            GACService.prototype.autocomplete = function (input) {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'maps/autocomplete', {
                    Input: input
                }).then(function (result) {
                    if (result.statusText == "OK") {
                        if (result.data["status"] == "OK") {
                            deferred.resolve(result.data["predictions"]);
                        }
                        else {
                            deferred.reject(result.data["status"]);
                        }
                    }
                    else {
                        deferred.reject(result.statusText);
                    }
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            ;
            GACService.prototype.details = function (id) {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'maps/details', {
                    PlaceId: id
                }).then(function (result) {
                    if (result.statusText == "OK") {
                        if (result.data["status"] == "OK") {
                            deferred.resolve(result.data["result"]);
                        }
                        else {
                            deferred.reject(result.data["status"]);
                        }
                    }
                    else {
                        deferred.reject(result.statusText);
                    }
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            GACService.$inject = ['$http', '$q'];
            return GACService;
        })();
        angular.module('pfb').service('gacService', GACService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=GACService.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var MailerService = (function () {
            function MailerService(httpService, qService) {
                this.httpService = httpService;
                this.qService = qService;
            }
            MailerService.prototype.sendMail = function (data) {
                return this.httpService.post(PFBConfig.apiEndpoint + 'mailer', data);
            };
            MailerService.$inject = ['$http', '$q'];
            return MailerService;
        })();
        angular.module('pfb').service('MailerService', MailerService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=MailerService.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var RequestService = (function () {
            function RequestService(httpService, qService) {
                this.httpService = httpService;
                this.qService = qService;
            }
            RequestService.prototype.create = function () {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'request/new', {
                    ClientId: PFBConfig.clientId
                }).then(function (result) {
                    deferred.resolve(result.data);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            ;
            RequestService.prototype.update = function (data) {
                return this.httpService.post(PFBConfig.apiEndpoint + 'request', data);
            };
            RequestService.prototype.get = function (id) {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'request', {
                    RequestId: id
                }).then(function (result) {
                    deferred.resolve(result.data);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            RequestService.prototype.offers = function (id) {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'offer?RequestId=' + id, null).then(function (result) {
                    var offers = result.data;
                    var desc = '<b>Kein Angebot m&ouml;glich.</b>' +
                        '<div>In dieser Kategorie k&ouml;nnen wir Ihnen momentan leider kein Sofortangebot unterbreiten. Bitte kontaktieren Sie uns f&uuml;r ein individuelles Angebot.</div>';
                    if (offers.length < 1) {
                        offers.push({
                            productName: 'Standard',
                            productDescription: desc,
                            noOffer: true
                        });
                    }
                    if (offers.length < 2) {
                        offers.push({
                            productName: 'Komfort',
                            productDescription: desc,
                            noOffer: true
                        });
                    }
                    if (offers.length < 3) {
                        offers.push({
                            productName: 'Luxus',
                            productDescription: desc,
                            noOffer: true
                        });
                    }
                    ;
                    deferred.resolve(offers);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            ;
            RequestService.prototype.offer = function (id, oid) {
                var deferred = this.qService.defer();
                this.httpService.post(PFBConfig.apiEndpoint + 'offer?RequestId=' + id + '&OfferId=' + oid, null).then(function (result) {
                    deferred.resolve(result.data);
                }, function (error) {
                    deferred.reject(error);
                });
                return deferred.promise;
            };
            RequestService.$inject = ['$http', '$q'];
            return RequestService;
        })();
        angular.module('pfb').service('RequestService', RequestService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=RequestService.js.map
var pfb;
(function (pfb) {
    var Services;
    (function (Services) {
        var UtilService = (function () {
            function UtilService(timeoutService, logService, qService) {
                this.timeoutService = timeoutService;
                this.logService = logService;
                this.qService = qService;
            }
            UtilService.prototype.cumulativeOffset = function (element) {
                var top = 0, left = 0;
                do {
                    top += element.offsetTop || 0;
                    left += element.offsetLeft || 0;
                    element = element.offsetParent;
                } while (element);
                return {
                    top: top,
                    left: left
                };
            };
            ;
            UtilService.prototype.jumpTo = function (eName) {
                var _this = this;
                this.timeoutService(function () {
                    var nav = document.getElementById('mainNavbar');
                    var navHeight = nav.clientHeight;
                    var elm = document.getElementById(eName);
                    var st = _this.cumulativeOffset(elm).top - navHeight - 10;
                    _this.logService.info('nav is ' + navHeight + ' high, jumping to ' + st);
                    $("body,html").scrollTop(st);
                }, 500);
            };
            UtilService.prototype.scrollTo = function (eName) {
                var _this = this;
                this.timeoutService(function () {
                    var nav = document.getElementById('mainNavbar');
                    var navHeight = nav.clientHeight;
                    var elm = document.getElementById(eName);
                    var st = _this.cumulativeOffset(elm).top - navHeight - 10;
                    _this.logService.info('nav is ' + navHeight + ' high, scolling to ' + st);
                    $("body,html").animate({ scrollTop: st }, "slow");
                }, 500);
            };
            UtilService.prototype.preloadImage = function (url) {
                var deffered = this.qService.defer(), image = new Image();
                image.src = url;
                if (image.complete) {
                    deffered.resolve();
                }
                else {
                    image.addEventListener('load', function () {
                        deffered.resolve();
                    });
                    image.addEventListener('error', function () {
                        deffered.reject();
                    });
                }
                return deffered.promise;
            };
            ;
            UtilService.prototype.getPlaceCountry = function (place) {
                for (var i = 0; i < place.address_components.length; i++) {
                    for (var j = 0; j < place.address_components[i].types.length; j++) {
                        if (place.address_components[i].types[j] == 'country') {
                            return place.address_components[i].short_name;
                        }
                    }
                }
                return 'UNKNOWN';
            };
            UtilService.prototype.isoDateString = function (date) {
                if (typeof (date) == 'undefined') {
                    return null;
                }
                var curr_date = date.getDate();
                var curr_month = date.getMonth();
                var curr_year = date.getFullYear();
                return curr_year + "-" + (curr_month + 1) + "-" + curr_date;
            };
            UtilService.$inject = ['$timeout', '$log', '$q'];
            return UtilService;
        })();
        angular.module('pfb').service('UtilService', UtilService);
    })(Services = pfb.Services || (pfb.Services = {}));
})(pfb || (pfb = {}));
//# sourceMappingURL=UtilService.js.map